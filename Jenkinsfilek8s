pipeline {
    agent {
        kubernetes {
            label 'devicepack'
			defaultContainer 'xc8-mplabx'
            yamlFile 'cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'dinesh.baria@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {		
		GITHUB_URL ='https://github.com/bd1085/devicepack.git'
		BITBUCKET_URL = 'https://bitbucket.microchip.com/scm/~i15784/devicepack.git'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/~i15784/tool-github-deploy.git'
		DEPLOY_SCRIPT_DIR = 'tool-github-deploy'
		DEPLOY_SCRIPT_FILE = 'deploy-source-as-is.sh'
		ARTIFACTORY_SERVER = 'https://artifacts.microchip.com:7999/artifactory'
		ARTIFACTORY_REPOSITORY = 'citd/report'
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
		stage('Pre-build') {
			steps {
				script {					
					MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
					COMPILER_PATH= sh (script: 'update-alternatives --list XC8_PATH',returnStdout: true).trim()										
					def pDir = "${MPLABX_PATH}/packs"					
					def ver = COMPILER_PATH.split('/')[4].substring(1)		
					
					execute("git clone https://bitbucket.microchip.com/scm/~i15784/tool-mplabx-c-project-generator.git")	
					execute("cd tool-mplabx-c-project-generator && git checkout bugFix/citd-250")
					execute("cd tool-mplabx-c-project-generator && node configGenerator.js sp=../ v8=${ver} packs=${pDir} ")	
				}
			}
		}

		stage('Build') {
            steps {
				script {				
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-build.git")						
					execute("cd tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")	
				}
            }
        }	
		
        stage('Deploy') {
			when {
				not { 
					changeRequest() 
				}
				anyOf {
					tag ''
				}
            }
			steps {
				script {
					execute("git clone ${env.DEPLOY_TOOL_URL}")		
					execute("cd ${env.DEPLOY_SCRIPT_DIR} && git checkout feature/annotatedTag")
	
					withCredentials([usernamePassword(credentialsId: 'GitHubToken', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
						execute("cd ${env.DEPLOY_SCRIPT_DIR} && bash ${env.DEPLOY_SCRIPT_FILE} ${env.BITBUCKET_URL} ${env.GITHUB_URL} ${USER_NAME} ${USER_PASS} '--tag ${env.TAG_NAME}'")	
					}	

                    sendSuccessfulGithubDeploymentEmail()					
				}
			}
        }		
	}

    post {
		always {
			script {
				deployReport("tool-mplabx-c-build/output/**")
			}
		}
        failure {			
            script {			
				sendPipelineFailureEmail()
            }
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}

def deployReport(String src) {
	def source = src	
	def key = GIT_URL.tokenize('/')[3]
	def slug = GIT_URL.tokenize('/')[4]
	slug = slug.substring(0, slug.lastIndexOf('.')) //Remove .git
	def zipFile = "${slug}-${BRANCH_NAME}-${BUILD_NUMBER}.zip"
	def targetZipFile = "${env.ARTIFACTORY_SERVER}/${env.ARTIFACTORY_REPOSITORY}/${key}/${slug}/${BRANCH_NAME}/${slug}-${BRANCH_NAME}.zip"
	zip archive: false, glob: "${source}",zipFile: "${zipFile}"
    execute("curl -T ${zipFile} ${targetZipFile}");
	
	sendRepoertEmail(targetZipFile)
}

def sendRepoertEmail(String link) {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Report: ${currentBuild.fullDisplayName}",
    body: "Report: ${link}"
}

def sendPipelineFailureEmail () {
    if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
        mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    } else {			  
        mail to: "${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    }
}

def sendSuccessfulGithubDeploymentEmail () {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
    body: "The changes have been successfully deployed to GitHub. ${env.GITHUB_URL}"
}