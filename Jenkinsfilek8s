pipeline {
    agent {
        kubernetes {
            label 'devicepack'
			defaultContainer 'xc8-mplabx'
            yamlFile 'cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'dinesh.baria@microchip.com,abhijeet.suryavanshi@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {	
		MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
		XC8_PATH= sh (script: 'update-alternatives --list XC8_PATH',returnStdout: true).trim()		
		GITHUB_URL ='https://github.com/bd1085/devicepack.git'
		BITBUCKET_URL = 'https://bitbucket.microchip.com/scm/~i15784/devicepack.git'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
		DEPLOY_SCRIPT_DIR = 'tool-github-deploy'
		DEPLOY_SCRIPT_FILE = 'deploy-source-as-is.sh'
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
		stage('Pre-build') {
			steps {
				
				script {
					echo "$env.MPLABX_PATH"
					def packDir = "${env.MPLABX_PATH}/packs"					
					def version = env.XC8_PATH.substring(18,21)
					echo "$version"
					
					execute("git clone https://bitbucket.microchip.com/scm/~i15784/tool-mplabx-c-project-generator.git")
					execute("cd tool-mplabx-c-project-generator && git checkout feature/devicePack")
					execute("cd tool-mplabx-c-project-generator && node configGenerator.js sp=../ v8=2.10 packs=${packDir}")	
				}
			}
		}

		stage('Build') {
            steps {
				script {
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-build.git")						
					execute("cd tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")		 
				}
            }
        }
		
		stage('Deploy') {
			when {
				not { 
					changeRequest() 
				}							
				tag ''				
            }
			steps {
				script {
					execute("git clone ${env.DEPLOY_TOOL_URL}")							
					
					withCredentials([usernamePassword(credentialsId: 'GitHubToken', usernameVariable: 'USER_NAME', passwordVariable:'USER_TOKEN' )]) {					
						execute("cd ${env.DEPLOY_SCRIPT_DIR} && bash ${env.DEPLOY_SCRIPT_FILE} ${env.BITBUCKET_URL} ${env.GITHUB_URL} ${USER_NAME} ${USER_TOKEN}")	
					}						
				}
			}
		}
	}
    post {
		always{
			archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", fingerprint: true
        }        
        failure {
			
            script {			
				if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
					mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Pipeline failure. ${env.BUILD_URL}"
				} else {			  
					mail to: "${params.NOTIFICATION_EMAIL}",
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Pipeline failure. ${env.BUILD_URL}"
				}
            }
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}


