pipeline {
    agent {
        kubernetes {
            label 'devicepack'
			defaultContainer 'xc8-mplabx'
            yamlFile 'cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'dinesh.baria@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {		
		GITHUB_URL ='https://github.com/bd1085/devicepack'
		BITBUCKET_URL = 'https://bitbucket.microchip.com/scm/~i15784/devicepack.git'	
		ARTIFACTORY_SERVER = 'https://artifacts.microchip.com:7999/artifactory'
		ARTIFACTORY_REPOSITORY = 'citd/report'
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
		stage('Pre-build') {
			steps {
				script {					
					MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
					COMPILER_PATH= sh (script: 'update-alternatives --list XC8_PATH',returnStdout: true).trim()										
					def pDir = "${MPLABX_PATH}/packs"					
					def ver = COMPILER_PATH.split('/')[4].substring(1)		
					
					def toolName = "tool-mplabx-c-project-generator"
					def toolVersion = "1.0.0"
					download(toolName,toolVersion)
					execute("cd tool-mplabx-c-project-generator && node configGenerator.js sp=../ v8=${ver} packs=${pDir} ")	
				}
			}
		}

		stage('Build') {
            steps {
				script {
					def toolName = "tool-mplabx-c-build"
					def toolVersion = "1.0.0"
					download(toolName,toolVersion)
					execute("cd tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")	
				}
            }
        }	
		
        stage('Deploy') {
			when {
				not { 
					changeRequest() 
				}
				anyOf {
					tag ''
				}
            }
			steps {
				container("python"){
					script {
						downloadDeployTool()
						
						withCredentials([usernamePassword(credentialsId: 'BD1085_GitHub_Token', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
							execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -deploy=true -gpat=${USER_PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_URL} -dgurl=${env.GITHUB_URL} -dbranch=master -dtag=${env.TAG_NAME} -dmfd=true")	
						}					
						
						withCredentials([usernamePassword(credentialsId: 'BD1085_GitHub_Token', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
							execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -rlo=true -gpat=${USER_PASS} -dgid=${USER_NAME} -rpn=devicepack -rltv=${env.TAG_NAME} -rltt=${env.TAG_NAME} -dmfd=true")	
						}

						sendSuccessfulGithubDeploymentEmail()					
					}
				}
			}
        }	
	}

    post {
		always {
			script {
				if(env.BRANCH_NAME == 'develop') {
					archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", allowEmptyArchive: true, fingerprint: true
				}
				if(env.TAG_NAME != null) {
					deployReport("tool-mplabx-c-build/output/**")
				}
			}
		}
        failure {			
            script {			
				sendPipelineFailureEmail()
            }
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}

def deployReport(String src) {
	def source = src	
	def files = findFiles glob: "${source}" 
	if( files.length > 0 ) {		
		def key = GIT_URL.tokenize('/')[3]
		def slug = GIT_URL.tokenize('/')[4]
		slug = slug.substring(0, slug.lastIndexOf('.')) //Remove .git
		def zipFile = "${slug}-${BRANCH_NAME}-${BUILD_NUMBER}.zip"
		def targetZipFile = "${env.ARTIFACTORY_SERVER}/${env.ARTIFACTORY_REPOSITORY}/${key}/${slug}/${BRANCH_NAME}/${slug}-${BRANCH_NAME}-${BUILD_NUMBER}.zip"
		zip archive: false, glob: "${source}",zipFile: "${zipFile}"
		execute("curl -T ${zipFile} ${targetZipFile}")		
		sendRepoertEmail(targetZipFile)
	}
}

def sendRepoertEmail(String link) {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Report: ${currentBuild.fullDisplayName}",
    body: "Report: ${link}"
}

def sendPipelineFailureEmail () {
    if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
        mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    } else {			  
        mail to: "${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    }
}

def sendSuccessfulGithubDeploymentEmail () {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
    body: "The changes have been successfully deployed to GitHub. ${env.GITHUB_URL}"
}

def download(String toolName,String toolVersion) {
	def repo = "ivy/citd"
	def url = "${env.ARTIFACTORY_SERVER}/${repo}/${toolName}/${toolVersion}/${toolName}-${toolVersion}.zip"
	def response =sh(script:"curl ${url} -o ${toolName}.zip",returnStdout: true).trim()
	unzip dir:"${toolName}", quiet: true, zipFile: "${toolName}.zip"	
	execute("rm -rf ${toolName}.zip")
}

def downloadDeployTool()
{
	def toolName = "tool-github-deploy"
	def toolVersion = "1.0.0"
	download(toolName,toolVersion)
	execute("chmod +x ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py")  
}